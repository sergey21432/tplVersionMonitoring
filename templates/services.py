import requests
import xml.etree.ElementTree as ET
from typing import Optional
from django.conf import settings
from django.utils import timezone
import logging
import re
from .models import UpdateLog, Template

logger = logging.getLogger(__name__)


class EIASAPIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API EIAS"""
    
    def __init__(self):
        self.base_url = settings.EIAS_API_BASE_URL
        self.timeout = 30
    
    def get_template_info(self, template: Template) -> Optional[UpdateLog]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ –∏–∑ API EIAS
        
        Args:
            template: –û–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞
            version: –í–µ—Ä—Å–∏—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –û–±—ä–µ–∫—Ç UpdateLog —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        params = {
            'P_TC': template.template_code,
            'P_V': template.current_version,
            'P_NSRF': '',
            'P_ENTITY': '',
            'P_EXTENDED_INFO': ''
        }
        
        try:
            response = requests.get(
                self.base_url, 
                params=params, 
                timeout=self.timeout,
                verify=False  # ToDo: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            )
            response.raise_for_status()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = response.content
            xml_text = content.decode(response.encoding or 'utf-8') or None
            
            return self._parse_xml_response(xml_text, template)
            
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API EIAS –¥–ª—è {template.template_code}: {e}")
            return None
        except ET.ParseError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –¥–ª—è {template.template_code}: {e}")
            return None
        except UnicodeDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è XML –¥–ª—è {template.template_code}: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {template.template_code}: {e}")
            return None
    
    def _parse_xml_response(self, xml_text: str, template: Template) -> Optional[UpdateLog]:
        """
        –ü–∞—Ä—Å–∏—Ç XML –æ—Ç–≤–µ—Ç –æ—Ç API EIAS –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç UpdateLog
        
        Args:
            xml_text: XML —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            template: –û–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            –û–±—ä–µ–∫—Ç UpdateLog –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            root = ET.fromstring(xml_text)
            # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º namespace
            namespace = root.tag.split('}')[0][1:] if '}' in root.tag else ''
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
            description_update = root.find(f'.//{{{namespace}}}DESCRIPTION_UPDATE').text
            if re.search( r'\b–ø—Ä–æ–≤–µ—Ä\w*\b', description_update, re.IGNORECASE):
                has_validation_changes = True
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç UpdateLog
            update_log = UpdateLog(
                template=template,
                old_version=template.current_version,
                new_version=root.find(f'.//{{{namespace}}}VERSION').text,
                has_validation_changes=has_validation_changes,
                raw_xml=xml_text,
                message_status=UpdateLog.MessageStatus.NOTSENT
            )
            
            return update_log
            
        except ET.ParseError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –¥–ª—è {template.template_code}: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XML –¥–ª—è {template.template_code}: {e}")
            return None


class MattermostService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Mattermost"""
    
    def __init__(self):
        self.webhook_url = settings.MATTERMOST_WEBHOOK_URL
        self.channel = settings.MATTERMOST_CHANNEL
    
    def send_template_update_notification(self, update_log: UpdateLog) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            update_log: –û–±—ä–µ–∫—Ç UpdateLog —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self.webhook_url:
            logger.warning("Webhook URL –¥–ª—è Mattermost –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        emoji = "üö®" if update_log.has_validation_changes else "üìù"
        title = f"{emoji} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
        
        message = f"**{title}**\n\n"
        message += f"**–®–∞–±–ª–æ–Ω:** `{update_log.template.template_code}`\n"
        message += f"**–í–µ—Ä—Å–∏—è:** `{update_log.old_version}` ‚Üí `{update_log.new_version}`\n"
        
        if update_log.has_validation_changes:
            message += "‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï**\n"
            message += "üîç **–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö**\n"
        
        message += f"**–í—Ä–µ–º—è:** {update_log.created_at.strftime('%d.%m.%Y %H:%M:%S')}"
        
        payload = {
            "text": message,
            "channel": self.channel,
            "username": "p4e_tpl_version_monitoring",
            "icon_emoji": ":robot_face:"
        }
        
        try:
            response = requests.post(
                self.webhook_url, 
                json=payload, 
                timeout=10
            )
            response.raise_for_status()
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Mattermost –¥–ª—è {update_log.template.template_code}")
            return True
            
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Mattermost: {e}")
            return False
