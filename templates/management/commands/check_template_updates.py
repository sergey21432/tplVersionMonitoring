from django.core.management.base import BaseCommand
from django.utils import timezone
from templates.models import Template, UpdateLog
from templates.services import EIASAPIService, MattermostService
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ API EIAS –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Mattermost'

    def add_arguments(self, parser):
        parser.add_argument(
            '--template-code',
            type=str,
            help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ –∫–æ–¥—É'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        )
        parser.add_argument(
            '--debug',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ —Å debugpy —Å–µ—Ä–≤–µ—Ä–æ–º'
        )

    def handle(self, *args, **options):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–∫–∏
        if options['debug']:
            import debugpy
            debugpy.listen(("localhost", 5678))
            self.stdout.write(
                self.style.WARNING('üêõ Debugger –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5678. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏–∑ VS Code...')
            )
            self.stdout.write(
                self.style.WARNING('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥—á–∏–∫–∞...')
            )
            debugpy.wait_for_client()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –û—Ç–ª–∞–¥—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!')
            )
        
        self.stdout.write(
            self.style.SUCCESS('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤...')
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        eias_service = EIASAPIService()
        mattermost_service = MattermostService()
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if options['template_code']:
            templates = Template.objects.filter(
                template_code=options['template_code'],
                status=Template.Status.ACTIVE
            )
        else:
            templates = Template.objects.filter(status=Template.Status.ACTIVE)
        
        if not templates.exists():
            self.stdout.write(
                self.style.WARNING('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
            )
            return
        
        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ {templates.count()} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
        
        updated_count = 0
        error_count = 0
        
        for template in templates:
            try:
                self.stdout.write(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω: {template.template_code}')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ –∏–∑ API
                api_data = eias_service.get_template_info(
                    template.template_code, 
                    template.current_version
                )
                if not api_data:
                    self.stdout.write(
                        self.style.ERROR(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {template.template_code}')
                    )
                    error_count += 1
                    continue
                
                latest_version = api_data.get('latest_version')
                if not latest_version:
                    self.stdout.write(
                        self.style.WARNING(f'–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è {template.template_code}')
                    )
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤–µ—Ä—Å–∏—è
                if latest_version == template.current_version:
                    self.stdout.write(
                        f'–í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: {template.template_code} ({latest_version})'
                    )
                else:
                    self.stdout.write(
                        self.style.SUCCESS(
                            f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {template.template_code} '
                            f'{template.current_version} ‚Üí {latest_version}'
                        )
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ
                    update_log = UpdateLog.objects.create(
                        template=template,
                        old_version=template.current_version,
                        new_version=latest_version,
                        has_validation_changes=api_data.get('has_validation_changes', False),
                        raw_xml=api_data.get('raw_xml', ''),
                        message_status=UpdateLog.MessageStatus.NOTSENT
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Mattermost (–µ—Å–ª–∏ –Ω–µ dry-run)
                    if not options['dry_run']:
                        success = mattermost_service.send_template_update_notification(
                            template_code=template.template_code,
                            old_version=template.current_version,
                            new_version=latest_version,
                            has_validation_changes=api_data.get('has_validation_changes', False)
                        )
                        
                        if success:
                            update_log.message_status = UpdateLog.MessageStatus.SENT
                            update_log.save()
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            template.current_version = latest_version
                            self.stdout.write(
                                self.style.SUCCESS(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {template.template_code}')
                            )
                        else:
                            self.stdout.write(
                                self.style.ERROR(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {template.template_code}')
                            )
                    else:
                        self.stdout.write(
                            self.style.WARNING(f'[DRY RUN] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {template.template_code}')
                        )
                    updated_count += 1
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                template.last_checked = timezone.now()
                template.save()
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {template.template_code}: {e}')
                )
                error_count += 1
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞ {template.template_code}: {e}')
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stdout.write('\n' + '='*50)
        self.stdout.write(
            self.style.SUCCESS(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        )
        self.stdout.write(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {updated_count}')
        self.stdout.write(f'–û—à–∏–±–æ–∫: {error_count}')
        self.stdout.write(f'–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {templates.count()}')
        
        if options['dry_run']:
            self.stdout.write(
                self.style.WARNING('–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ DRY RUN - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å')
            )
